"""
LLM Service - T√≠ch h·ª£p OpenAI v·ªõi logic gi·ªëng h·ªát file app.py g·ªëc
"""
import logging
import re
import os
from openai import OpenAI
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

logger = logging.getLogger(__name__)

class LLMService:
    """Service t√≠ch h·ª£p OpenAI LLM"""
    
    def __init__(self):
        self.client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    
    def generate_intervention_recommendation(self, student_data, error_messages, common_error_types):
        """
        T·∫°o ƒë·ªÅ xu·∫•t can thi·ªáp b·∫±ng OpenAI - GI·ªêNG H·ªÜT LOGIC FILE G·ªêC
        
        Args:
            student_data (dict): D·ªØ li·ªáu sinh vi√™n
            error_messages (list): Danh s√°ch l·ªói
            common_error_types (list): Lo·∫°i l·ªói ph·ªï bi·∫øn
            
        Returns:
            str: ƒê·ªÅ xu·∫•t can thi·ªáp
        """
        # GI·ªêNG H·ªÜT PROMPT TRONG FILE G·ªêC
        prompt = f"""
        B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªó tr·ª£ gi√°o d·ª•c, chuy√™n cung c·∫•p ph√¢n t√≠ch l·ªói v√† ƒë·ªÅ xu·∫•t c·∫£i thi·ªán chi ti·∫øt, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát, d√†nh cho sinh vi√™n h·ªçc l·∫≠p tr√¨nh.

        D∆∞·ªõi ƒë√¢y l√† th√¥ng tin sinh vi√™n:
        - GPA: {student_data.get('gpa', 'N/A')}
        - Ti·∫øn ƒë·ªô h·ªçc t·∫≠p: {student_data.get('progressrate', 'N/A')}%
        - ƒêi·ªÉm Bloom: {student_data.get('bloomscore', 'N/A')}
        - S·ªë l·∫ßn n·ªôp b√†i: {student_data.get('num_submissions', 'N/A')}

        ## Danh s√°ch t·∫•t c·∫£ l·ªói v√† c·∫£nh b√°o c·ªßa sinh vi√™n (c·∫ßn ph√¢n t√≠ch):
        {chr(10).join([f'- {error}' for error in error_messages]) if error_messages else 'Kh√¥ng c√≥ l·ªói ho·∫∑c c·∫£nh b√°o c·ª• th·ªÉ'}

        ## C√°c l·ªói ph·ªï bi·∫øn trong kh√≥a h·ªçc (ch·ªâ tham kh·∫£o ƒë·ªÉ li√™n h·ªá n·∫øu c√≥ li√™n quan):
        {', '.join(common_error_types) if common_error_types else 'Kh√¥ng c√≥ l·ªói chung'}

        ---

        ### üéØ Y√™u c·∫ßu ph·∫£n h·ªìi:
        1. **Ph√¢n t√≠ch chi ti·∫øt t·ª´ng l·ªói v√† c·∫£nh b√°o c·ªßa sinh vi√™n** (d·ª±a tr√™n danh s√°ch tr√™n), **kh√¥ng ƒë∆∞·ª£c b·ªè s√≥t b·∫•t k·ª≥ m·ª•c n√†o**.
        2. M·ªói l·ªói h√£y s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng markdown sau:

        ---

        ## L·ªói [s·ªë th·ª© t·ª±]: [T√™n l·ªói]  
        ### 1. Ph√¢n t√≠ch l·ªói  
        - M√¥ t·∫£ l·ªói: [M√¥ t·∫£ ng·∫Øn g·ªçn l·ªói x·∫£y ra trong ho√†n c·∫£nh n√†o, bi·ªÉu hi·ªán ra sao ‚Äì t·ªëi ƒëa 2-3 c√¢u].  
        - Nguy√™n nh√¢n: [L√Ω do sinh vi√™n m·∫Øc l·ªói, v√≠ d·ª•: thi·∫øu hi·ªÉu bi·∫øt v·ªÅ c√∫ ph√°p, nh·∫ßm l·∫´n logic ‚Äì t·ªëi ƒëa 2 c√¢u].  

        ### 2. ƒê·ªÅ xu·∫•t c·∫£i thi·ªán  
        - C√°ch kh·∫Øc ph·ª•c: [H∆∞·ªõng d·∫´n c·ª• th·ªÉ, ng·∫Øn g·ªçn, t·ª´ng b∆∞·ªõc n·∫øu c·∫ßn ‚Äì t·ªëi ƒëa 3-4 c√¢u].  
        - V√≠ d·ª• minh h·ªça (n·∫øu √°p d·ª•ng):  
        ```c
        [ƒêo·∫°n m√£ minh h·ªça c√°ch s·ª≠a l·ªói. ∆Øu ti√™n d√πng C/C++ tr·ª´ khi l·ªói thu·ªôc ng√¥n ng·ªØ kh√°c. N·∫øu kh√¥ng c√≥ v√≠ d·ª• m√£, gi·∫£i th√≠ch l√Ω do.]
        ```

        ---

        3. N·∫øu kh√¥ng c√≥ l·ªói ho·∫∑c c·∫£nh b√°o c·ª• th·ªÉ, cung c·∫•p ƒë·ªÅ xu·∫•t chung ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t h·ªçc t·∫≠p, t·∫≠p trung v√†o k·ªπ nƒÉng l·∫≠p tr√¨nh, v·ªõi ƒë·ªãnh d·∫°ng:  
        ## ƒê·ªÅ xu·∫•t c·∫£i thi·ªán chung  
        - M√¥ t·∫£: [M√¥ t·∫£ ng·∫Øn g·ªçn t√¨nh tr·∫°ng h·ªçc t·∫≠p hi·ªán t·∫°i d·ª±a tr√™n GPA, ti·∫øn ƒë·ªô, ƒëi·ªÉm Bloom].  
        - ƒê·ªÅ xu·∫•t: [H∆∞·ªõng d·∫´n c·ª• th·ªÉ, v√≠ d·ª•: c·∫£i thi·ªán k·ªπ nƒÉng debug, ƒë·ªçc t√†i li·ªáu ‚Äì t·ªëi ƒëa 3-4 c√¢u].  

        **V√≠ d·ª• ph·∫£n h·ªìi**:
        ## L·ªói 1: L·ªói h√†m: Truy·ªÅn tham s·ªë kh√¥ng ƒë√∫ng ki·ªÉu  
        ### 1. Ph√¢n t√≠ch l·ªói  
        - M√¥ t·∫£ l·ªói: L·ªói x·∫£y ra khi truy·ªÅn tham s·ªë ki·ªÉu chu·ªói v√†o h√†m y√™u c·∫ßu ki·ªÉu s·ªë nguy√™n, g√¢y l·ªói bi√™n d·ªãch.  
        - Nguy√™n nh√¢n: Sinh vi√™n ch∆∞a n·∫Øm r√µ c√°ch khai b√°o v√† s·ª≠ d·ª•ng ki·ªÉu d·ªØ li·ªáu trong C/C++.  

        ### 2. ƒê·ªÅ xu·∫•t c·∫£i thi·ªán  
        - C√°ch kh·∫Øc ph·ª•c: Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa tham s·ªë tr∆∞·ªõc khi truy·ªÅn v√†o h√†m, ƒë·∫£m b·∫£o kh·ªõp v·ªõi ƒë·ªãnh nghƒ©a h√†m.  
        - V√≠ d·ª• minh h·ªça:  
        ```c
        // Sai:
        void tinhTong(int a, int b) {{ printf("%d", a + b); }}
        tinhTong("10", 20); // L·ªói ki·ªÉu d·ªØ li·ªáu
        // ƒê√∫ng:
        tinhTong(10, 20);
        ```

        ## ƒê·ªÅ xu·∫•t c·∫£i thi·ªán chung  
        - M√¥ t·∫£: Sinh vi√™n c√≥ GPA cao v√† ti·∫øn ƒë·ªô t·ªët, nh∆∞ng c·∫ßn c·∫£i thi·ªán k·ªπ nƒÉng debug.  
        - ƒê·ªÅ xu·∫•t: Th·ª±c h√†nh debug b·∫±ng c√°ch s·ª≠ d·ª•ng c√¥ng c·ª• nh∆∞ gdb v√† ƒë·ªçc t√†i li·ªáu v·ªÅ c√∫ ph√°p C/C++.

        ƒê·∫£m b·∫£o tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, r√µ r√†ng, v√† s·ª≠ d·ª•ng ng√¥n ng·ªØ l·∫≠p tr√¨nh C/C++ cho v√≠ d·ª• minh h·ªça tr·ª´ khi l·ªói y√™u c·∫ßu ng√¥n ng·ªØ kh√°c. Ph·∫£n h·ªìi ph·∫£i bao g·ªìm t·∫•t c·∫£ l·ªói ƒë∆∞·ª£c li·ªát k√™ v√† tu√¢n th·ªß nghi√™m ng·∫∑t ƒë·ªãnh d·∫°ng markdown.
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªó tr·ª£ gi√°o d·ª•c, chuy√™n cung c·∫•p ph√¢n t√≠ch l·ªói v√† ƒë·ªÅ xu·∫•t c·∫£i thi·ªán chi ti·∫øt v√† d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát."},
                    {"role": "user", "content": prompt}
                ]
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"L·ªói khi g·ªçi OpenAI API: {str(e)}")
            return "Kh√¥ng th·ªÉ t·∫°o ƒë·ªÅ xu·∫•t can thi·ªáp do l·ªói h·ªá th·ªëng."
    
    def parse_intervention_suggestions(self, recommendation, studentid, error_messages):
        """
        Ph√¢n t√≠ch ƒë·ªÅ xu·∫•t th√†nh suggestions - GI·ªêNG H·ªÜT LOGIC FILE G·ªêC
        
        Args:
            recommendation (str): ƒê·ªÅ xu·∫•t t·ª´ LLM
            studentid (str): ID sinh vi√™n
            error_messages (list): Danh s√°ch l·ªói
            
        Returns:
            list: Danh s√°ch suggestions ƒë√£ ph√¢n t√≠ch
        """
        error_sections = re.split(r'## L·ªói \d+:', recommendation)[1:]
        parsed_suggestions = []

        for i, section in enumerate(error_sections, 1):
            name_match = re.match(r'([^\n]+)\n', section)
            error_name = name_match.group(1).strip() if name_match else f"L·ªói {i}"
            
            parts = re.split(r'### \d+\.', section)
            error_analysis = parts[1].strip() if len(parts) > 1 else "Kh√¥ng c√≥ ph√¢n t√≠ch chi ti·∫øt"
            improvement_suggestion = parts[2].strip() if len(parts) > 2 else "Kh√¥ng c√≥ ƒë·ªÅ xu·∫•t chi ti·∫øt"

            parsed_suggestions.append({
                'id': f"error_{i}_{studentid}",
                'title': f"ƒê·ªÅ xu·∫•t c·∫£i thi·ªán cho {error_name}",
                'content': f"## {error_name}\n{error_analysis}\n### ƒê·ªÅ xu·∫•t c·∫£i thi·ªán\n{improvement_suggestion}",
                'type': 'info'
            })

        if not error_messages:
            general_section = re.search(r'## ƒê·ªÅ xu·∫•t c·∫£i thi·ªán chung.*?$(.*?)(?=(##|$))', recommendation, re.DOTALL)
            general_content = general_section.group(1).strip() if general_section else recommendation
            parsed_suggestions.append({
                'id': f"general_{studentid}",
                'title': "ƒê·ªÅ xu·∫•t c·∫£i thi·ªán chung",
                'content': f"## ƒê·ªÅ xu·∫•t c·∫£i thi·ªán chung\n{general_content}",
                'type': 'info'
            })

        return parsed_suggestions
    
    def evaluate_llm_scenarios(self, scenarios):
        """
        ƒê√°nh gi√° LLM v·ªõi c√°c k·ªãch b·∫£n kh√°c nhau
        
        Args:
            scenarios (list): Danh s√°ch k·ªãch b·∫£n test
            
        Returns:
            list: K·∫øt qu·∫£ ƒë√°nh gi√°
        """
        results = []
        
        for scenario in scenarios:
            try:
                recommendation = self.generate_intervention_recommendation(
                    {
                        'gpa': scenario['gpa'],
                        'progressrate': scenario['progressrate'],
                        'bloomscore': scenario['bloomscore'],
                        'num_submissions': scenario['num_submissions']
                    },
                    scenario['errors'],
                    []
                )
                
                results.append({
                    'scenario': scenario['name'],
                    'recommendation': recommendation
                })
            except Exception as e:
                logger.error(f"L·ªói khi ƒë√°nh gi√° k·ªãch b·∫£n {scenario['name']}: {str(e)}")
                results.append({
                    'scenario': scenario['name'],
                    'recommendation': f"L·ªói: {str(e)}"
                })
        
        return results